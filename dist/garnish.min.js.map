{"version":3,"sources":["../lib/Base.js","../src/Garnish.js","../src/BaseDrag.js","../src/CheckboxSelect.js","../src/ContextMenu.js","../src/CustomSelect.js","../src/DisclosureMenu.js","../src/Drag.js","../src/DragDrop.js","../src/DragMove.js","../src/DragSort.js","../src/EscManager.js","../src/HUD.js","../src/MenuBtn.js","../src/MixedInput.js","../src/Modal.js","../src/NiceText.js","../src/Select.js","../src/SelectMenu.js","../src/ShortcutManager.js","garnish.js"],"names":["$","getErd","erd","elementResizeDetectorMaker","callOnAdd","triggerResizeEvent","elem","trigger","Base","extend","_instance","_static","prototype","_prototyping","proto","this","call","base","constructor","klass","_constructing","apply","arguments","ancestor","forEach","implement","toString","valueOf","type","init","source","value","length","test","method","previous","returnValue","toSource","hidden","i","key","desc","Object","getOwnPropertyDescriptor","defineProperty","version","object","block","context","undefined","String","Garnish","$win","window","$doc","document","$bod","body","rtl","hasClass","ltr","$scrollContainer","DELETE_KEY","SHIFT_KEY","CTRL_KEY","ALT_KEY","RETURN_KEY","ESC_KEY","SPACE_KEY","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","A_KEY","S_KEY","CMD_KEY","PRIMARY_CLICK","SECONDARY_CLICK","X_AXIS","Y_AXIS","FX_DURATION","TEXT_NODE","log","msg","console","_isMobileBrowser","_isMobileOrTabletBrowser","isMobileBrowser","detectTablets","a","navigator","userAgent","vendor","opera","RegExp","substr","isArray","val","Array","isJquery","jQuery","isString","hasAttr","attr","isTextNode","nodeType","getOffset","_offset","offset","top","scrollTop","left","scrollLeft","getDist","x1","y1","x2","y2","Math","sqrt","pow","hitTest","x","y","_$elem","_x1","_y1","_x2","outerWidth","_y2","outerHeight","isCursorOver","ev","pageX","pageY","copyTextStyles","target","$source","$target","css","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","textAlign","textIndent","whiteSpace","wordSpacing","wordWrap","getBodyScrollTop","_scrollTop","_maxScrollTop","height","requestAnimationFrame","raf","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","cancelAnimationFrame","cancel","mozCancelAnimationFrame","webkitCancelAnimationFrame","clearTimeout","id","scrollContainerToElement","container","$elem","$container","scrollParent","prop","elemScrollOffset","elemOffset","targetScrollTop","elemHeight","containerHeight","innerHeight","clientHeight","velocity","mobileHA","SHAKE_STEPS","SHAKE_STEP_DURATION","shake","startingPoint","parseInt","isNaN","_properties","getElement","makeArray","getInputBasename","name","replace","getInputPostVal","$input","findInputs","find","getPostData","inputName","postData","arrayInputCounters","$inputs","eq","inputVal","isArrayInput","croppedName","substring","j","copyInputValues","$sourceInputs","$targetInputs","isCtrlKeyPressed","platform","match","metaKey","ctrlKey","_eventHandlers","_normalizeEvents","events","split","on","data","handler","push","namespace","off","eventHandler","splice","settings","_namespace","_$listeners","_disabled","floor","random","_listeners","noop","setSettings","defaults","baseSettings","_ev","_splitEvents","trim","_formatEvents","slice","join","addListener","func","bind","proxy","inArray","removeListener","removeAllListeners","disable","enable","destroy","event","special","activate","setup","namespaces","eventHandle","mousedown.garnish-activate","e","preventDefault","click.garnish-activate","keydown.garnish-activate","keyCode","addClass","removeClass","removeAttr","teardown","textchange","handle","el","args","delay","handleObj","targetData","delayTimeout","resize","listenTo","each","BaseDrag","$items","dragging","mousedownX","mousedownY","realMouseX","realMouseY","mouseX","mouseY","mouseDistX","mouseDistY","mouseOffsetX","mouseOffsetY","$targetItem","scrollProperty","scrollAxis","scrollDist","scrollProxy","scrollFrame","_","items","isPlainObject","addItems","allowDragging","startDragging","onDragStart","drag","didMouseMove","_scrollProperty","axis","_winScrollTop","_minMouseScrollY","windowScrollTargetSize","_scrollAxis","_scrollDist","round","_maxMouseScrollY","_winScrollLeft","_minMouseScrollX","_maxMouseScrollX","width","_scrollWindow","_cancelWindowScroll","onDrag","stopDragging","onDragStop","item","removeItems","add","index","_deinitItem","removeAllItems","_handleMouseDown","which","$handle","_getItemHandle","currentTarget","is","closest","ignoreHandleSelector","_handleMouseMove","_mouseDist","minMouseDist","_handleMouseUp","scrollPos","removeData","CheckboxSelect","$all","$options","$checkboxes","filter","not","onAllChange","isAllChecked","checked","disabled","ContextMenu","options","$menu","showingMenu","counter","buildMenu","menuClass","$ul","appendTo","hasOwnProperty","option","$li","$a","label","onClick","mousedown","hideMenu","showMenu","showing","show","shortcutManager","addLayer","registerShortcut","hide","removeLayer","CustomSelect","visible","$anchor","menuId","_windowWidth","_windowHeight","_windowScrollLeft","_windowScrollTop","_anchorOffset","_anchorWidth","_anchorHeight","_anchorOffsetRight","_anchorOffsetBottom","_menuWidth","_menuHeight","addOptions","$menuList","role","aria-hidden","attachToElement","anchor","stopPropagation","nodeName","optionKey","tabindex","selectOption","setPositionRelativeToAnchor","topClearance","bottomClearance","maxHeight","windowSpacing","min","align","_alignCenter","rightClearance","leftClearance","_alignRight","_alignLeft","opacity","display","duration","detach","onOptionSelect","selectedOption","right","Menu","DisclosureMenu","$trigger","$alignmentElement","$wrapper","_wrapperElementOffset","_alignmentElementOffset","_triggerWidth","_triggerHeight","triggerId","expanded","alignmentSelector","wrapper","addDisclosureMenuEventListeners","handleTriggerClick","handleKeypress","handleMousedown","focusElement","direction","newIndex","currentFocus","focusable","currentIndex","elementToFocus","focus","newTarget","triggerButton","newTargetIsInsideDisclosure","has","isExpanded","setContainerPosition","firstFocusableEl","getBoundingClientRect","bottom","topAdjustment","bottomAdjustment","bottomClearanceExists","leftAdjustment","rightAdjustment","Drag","targetItemWidth","targetItemHeight","targetItemPositionInDraggee","$draggee","otherItems","totalOtherItems","helpers","helperTargets","helperPositions","helperLagIncrement","updateHelperPosProxy","updateHelperPosFrame","lastMouseX","lastMouseY","_returningHelpersToDraggees","draggeeDisplay","setDraggee","findDraggee","_updateHelperPos","helperLagIncrementDividend","concat","toArray","singleHelper","_createHelper","removeDraggee","collapseDraggees","appendDraggee","$newDraggee","oldLength","newLength","draggeeVirtualMidpointX","draggeeVirtualMidpointY","getHelperTargetX","getHelperTargetY","returnHelpersToDraggees","$helper","visibility","callback","draggeeOffset","_showDraggee","onReturnHelpersToDraggees","$draggeeHelper","clone","copyDraggeeInputValuesToHelper","ceil","margin","pointer-events","helper","append","helperPos","_getHelperTarget","position","zIndex","helperBaseZindex","helperOpacity","_i","_j","_lag","helperLagBase","helperSpacingX","helperSpacingY","remove","DragDrop","$dropTargets","$activeDropTarget","updateDropTargets","dropTargets","_activeDropTarget","_elem","activeDropTargetClass","onDropTargetChange","fadeOutHelpers","complete","DragMove","DragSort","$heightedContainer","$insertion","insertionVisible","oldDraggeeIndexes","newDraggeeIndexes","closestItem","_midpointVersion","_$prevItem","createInsertion","insertion","magnetStrength","_draggeeOffsetX","_draggeeOffsetY","canInsertBefore","$item","canInsertAfter","_getDraggeeIndexes","moveTargetItemToFront","_getItemIndex","first","insertBefore","_placeInsertionWithDraggee","_clearMidpoints","parent","_removeInsertion","_getClosestItem","_updateInsertion","insertAfter","onSortChange","onInsertionPointChange","indexes","_closestItem","_testForClosestItem","_midpoint","_getItemMidpoint","_startXDist","_lastXDist","abs","_startYDist","_lastYDist","_$otherItem","prev","_xDist","_yDist","last","next","_repositionDraggee","get","_moveDraggeeToItem","_$item","prependTo","_mouseDistX","_mouseDistY","_closestItemMouseDistY","_closestItemMouseDistX","EscManager","handlers","escapeLatest","register","obj","unregister","pop","escManager","HUD","$fixedTriggerParent","$hud","$tip","$body","$header","$footer","$mainContainer","$main","$shade","orientation","updatingSizeAndPosition","windowWidth","windowHeight","mainWidth","mainHeight","bodyContents","onShow","onHide","onSubmit","activeHUDs","class","shadeClass","hudClass","tipClass","bodyClass","mainContainerClass","mainClass","updateBody","$parent","offsetParent","hideOnShadeClick","closeBtn","html","headerClass","footerClass","closeOtherHUDs","hudID","hideOnEsc","updateRecords","updateSizeAndPosition","changed","force","updateSizeAndPositionInternal","triggerWidth","triggerHeight","triggerOffset","windowScrollLeft","windowScrollTop","scrollContainerTriggerOffset","scrollContainerScrollLeft","scrollContainerScrollTop","hudBodyWidth","hudBodyHeight","overflow-x","overflow-y","clearances","orientations","relevantSize","triggerSpacing","tipClasses","maxHudBodyWidth","maxHudBodyHeight","minBodyWidth","minBodyHeight","triggerCenter","maxLeft","minLeft","tipLeft","tipWidth","maxTop","minTop","tipTop","toggle","submit","_handleSubmit","MenuBtn","$btn","menu","btn","menuAnchor","aria-controls","aria-haspopup","aria-expanded","onMenuHide","onBlur","contains","activeElement","onKeyDown","$option","$currentOption","click","focusOption","onMouseDown","MixedInput","elements","focussedElement","blurTimeout","getElementIndex","isText","onFocus","setFocus","setCarotPos","addTextElement","text","TextElement","addElement","focussedElementIndex","selectionStart","selectionEnd","preVal","postVal","newText","removeElement","$prevElem","$nextElem","prevElemVal","newVal","blurFocussedElement","focusPreviousElement","$from","focusNextElement","pos","parentInput","$stage","focussed","interval","padding","setWidth","getIndex","buildStage","getTextWidth","stageWidth","setInterval","checkInput","NiceText","clearInterval","getVal","setVal","onChange","Modal","dragger","desiredWidth","desiredHeight","resizeDragger","resizeStartWidth","resizeStartHeight","setContainer","autoShow","instances","draggable","dragHandleSelector","resizable","$resizeDragHandle","_handleResizeStart","_handleResize","closeOtherModals","visibleModal","onFadeIn","quickShow","onFadeOut","quickHide","max","min-width","min-height","_width","getWidth","minGutter","_height","getHeight","_handleWindowResize","relativeElemPadding","$hint","$charsLeft","autoHeight","maxLength","showCharsLeft","showingHint","inputBoxSizing","minHeight","initialized","input","isVisible","initialize","getHeightForValue","updateHeight","hint","$hintContainer","charsLeftClass","updateCharsLeft","initializeIfVisible","showHint","hintFadeDuration","hideHint","onTextChange","border-top","border-right","border-bottom","border-left","padding-top","padding-right","padding-bottom","padding-left","-webkit-box-sizing","-moz-box-sizing","box-sizing","spaces","onHeightChange","updateHeightIfWidthChanged","_charsLeft","charsLeftHtml","negativeCharsLeftClass","charsLeft","Select","$selectedItems","$focusedItem","mousedownTarget","mouseUpTimeout","callbackFrame","$focusable","$first","$last","allowEmpty","checkboxMode","ignoreClick","deselectAll","getItemIndex","isSelected","selectItem","preventScroll","multi","setFocusableItem","focusItem","_selectItems","selectAll","selectRange","sliceFrom","sliceTo","deselectItem","_deselectItems","clearFirst","deselectOthers","toggleItem","_canDeselect","clearMouseUpTimeout","getFirstItem","getLastItem","isPreviousItem","isNextItem","getPreviousItem","getNextItem","getItemToTheLeft","horizontal","vertical","getClosestItem","getItemToTheRight","getItemAbove","getItemBelow","dir","step","axisProps","closestItemAxisProps","dirProps","closestItemDirectionProps","$thisItem","thisOffset","thisMidpoint","midpointOffset","midpointSizeFunc","otherRowPos","smallestMidpointDiff","$closestItem","$otherItem","otherOffset","isNextRow","rowOffset","otherMidpoint","midpointDiff","isWrongDirection","getFurthestItemToTheLeft","getFurthestItem","getFurthestItemToTheRight","getFurthestItemAbove","getFurthestItemBelow","$testItem","totalSelected","getTotalSelected","updateIndexes","itemsChanged","selectionChanged","selectedIndex","selectedClass","onSelectionChange","resetItemOrder","getSelectedItems","shiftKey","_actAsCheckbox","onMouseUp","<","b",">","SelectMenu","selected","build","_addSelectedOptionClass","select","dom","ul","className","setBtnText","$btnLabel","ulClass","ShortcutManager","shortcuts","layer","shortcut","_normalizeShortcut","JSON","stringify","unregisterShortcut","ctrl","shift","alt","triggerShortcut","altKey"],"mappings":"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","file":"garnish.min.js","sourcesContent":["/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n","/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        return ev.ctrlKey;\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n","/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n            this.trigger('show');\n            Garnish.shortcutManager.addLayer();\n            Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hideMenu.bind(this));\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n            this.trigger('hide');\n            Garnish.shortcutManager.removeLayer();\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n","/** global: Garnish */\n/**\n * Custom Select Menu\n */\nGarnish.CustomSelect = Garnish.Base.extend(\n  {\n    settings: null,\n    visible: false,\n\n    $container: null,\n    $options: null,\n    $anchor: null,\n\n    menuId: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _anchorOffset: null,\n    _anchorWidth: null,\n    _anchorHeight: null,\n    _anchorOffsetRight: null,\n    _anchorOffsetBottom: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (container, settings) {\n      this.setSettings(settings, Garnish.CustomSelect.defaults);\n\n      this.$container = $(container);\n\n      this.$options = $();\n      this.addOptions(this.$container.find('a'));\n\n      // Menu List\n      this.menuId = 'menu' + this._namespace;\n      this.$menuList = $('ul', this.$container);\n      this.$menuList.attr({\n        role: 'listbox',\n        id: this.menuId,\n        'aria-hidden': 'true',\n      });\n\n      // Deprecated\n      if (this.settings.attachToElement) {\n        this.settings.anchor = this.settings.attachToElement;\n        Garnish.log(\n          \"The 'attachToElement' setting is deprecated. Use 'anchor' instead.\"\n        );\n      }\n\n      if (this.settings.anchor) {\n        this.$anchor = $(this.settings.anchor);\n      }\n\n      // Prevent clicking on the container from hiding the menu\n      this.addListener(this.$container, 'mousedown', function (ev) {\n        ev.stopPropagation();\n\n        if (ev.target.nodeName !== 'INPUT') {\n          // Prevent this from causing the menu button to blur\n          ev.preventDefault();\n        }\n      });\n    },\n\n    addOptions: function ($options) {\n      this.$options = this.$options.add($options);\n      $options.data('menu', this);\n\n      $options.each(\n        function (optionKey, option) {\n          $(option).attr({\n            role: 'option',\n            tabindex: '-1',\n            id: this.menuId + '-option-' + optionKey,\n          });\n        }.bind(this)\n      );\n\n      this.removeAllListeners($options);\n      this.addListener($options, 'click', function (ev) {\n        this.selectOption(ev.currentTarget);\n      });\n    },\n\n    setPositionRelativeToAnchor: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._anchorOffset = this.$anchor.offset();\n      this._anchorWidth = this.$anchor.outerWidth();\n      this._anchorHeight = this.$anchor.outerHeight();\n      this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n      this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._anchorWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the anchor?\n      var topClearance = this._anchorOffset.top - this._windowScrollTop,\n        bottomClearance =\n          this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n      if (\n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance)\n      ) {\n        this.$container.css({\n          top: this._anchorOffsetBottom,\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          top:\n            this._anchorOffset.top -\n            Math.min(\n              this._menuHeight,\n              topClearance - this.settings.windowSpacing\n            ),\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._anchorOffset.left + this._menuWidth),\n          leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._anchorOffset;\n      delete this._anchorWidth;\n      delete this._anchorHeight;\n      delete this._anchorOffsetRight;\n      delete this._anchorOffsetBottom;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    show: function () {\n      if (this.visible) {\n        return;\n      }\n\n      // Move the menu to the end of the DOM\n      this.$container.appendTo(Garnish.$bod);\n\n      if (this.$anchor) {\n        this.setPositionRelativeToAnchor();\n      }\n\n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      this.$menuList.attr('aria-hidden', 'false');\n\n      Garnish.shortcutManager\n        .addLayer()\n        .registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setPositionRelativeToAnchor'\n      );\n\n      this.visible = true;\n      this.trigger('show');\n    },\n\n    hide: function () {\n      if (!this.visible) {\n        return;\n      }\n\n      this.$menuList.attr('aria-hidden', 'true');\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION },\n        function () {\n          this.$container.detach();\n        }.bind(this)\n      );\n\n      Garnish.shortcutManager.removeLayer();\n      this.removeListener(Garnish.$scrollContainer, 'scroll');\n      this.visible = false;\n      this.trigger('hide');\n    },\n\n    selectOption: function (option) {\n      this.settings.onOptionSelect(option);\n      this.trigger('optionselect', { selectedOption: option });\n      this.hide();\n    },\n\n    _alignLeft: function () {\n      this.$container.css({\n        left: this._anchorOffset.left,\n        right: 'auto',\n      });\n    },\n\n    _alignRight: function () {\n      this.$container.css({\n        right:\n          this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n        left: 'auto',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(\n        this._anchorOffset.left + this._anchorWidth / 2 - this._menuWidth / 2\n      );\n\n      if (left < 0) {\n        left = 0;\n      }\n\n      this.$container.css('left', left);\n    },\n  },\n  {\n    defaults: {\n      anchor: null,\n      windowSpacing: 5,\n      onOptionSelect: $.noop,\n    },\n  }\n);\n\n/**\n * @deprecated\n */\nGarnish.Menu = Garnish.CustomSelect;\n","/** global: Garnish */\n/**\n * Disclosure Widget\n */\nGarnish.DisclosureMenu = Garnish.Base.extend(\n  {\n    settings: null,\n\n    $trigger: null,\n    $container: null,\n    $alignmentElement: null,\n    $wrapper: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _wrapperElementOffset: null,\n    _alignmentElementOffset: null,\n    _triggerWidth: null,\n    _triggerHeight: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (trigger, settings) {\n      this.setSettings(settings, Garnish.DisclosureMenu.defaults);\n\n      this.$trigger = $(trigger);\n      var triggerId = this.$trigger.attr('aria-controls');\n      this.$container = $(\"#\" + triggerId);\n\n      if (!this.$container) return; /* Exit if no disclosure container is found */\n\n      // Get and store expanded state from trigger\n      var expanded = this.$trigger.attr('aria-expanded');\n\n      // If no expanded state exists on trigger, add for a11y\n      if (!expanded) {\n        this.$trigger.attr('aria-expanded', 'false');\n      }\n\n      // Capture additional alignment element\n      var alignmentSelector = this.$container.data('align-to');\n      if (alignmentSelector) {\n        this.$alignmentElement = $(alignmentSelector);\n      } else {\n        this.$alignmentElement = this.$trigger;\n      }\n\n      var wrapper = this.$container.closest('[data-wrapper]');\n      if (wrapper) {\n        this.$wrapper = wrapper;\n      }\n\n      this.addDisclosureMenuEventListeners();\n    },\n\n    addDisclosureMenuEventListeners: function() {\n      this.addListener(this.$trigger, 'click', function() {\n        this.handleTriggerClick();\n      });\n\n      this.addListener(this.$container, 'keydown', function(event) {\n        this.handleKeypress(event);\n      });\n\n      this.addListener(Garnish.$doc, 'mousedown', this.handleMousedown)\n    },\n\n    focusElement: function(direction) {\n      var currentFocus = $(':focus');\n\n      var focusable = this.$container.find(':focusable');\n\n      var currentIndex = focusable.index(currentFocus);\n      var newIndex;\n\n      if (direction === 'prev') {\n        newIndex = currentIndex - 1;\n      } else {\n        newIndex = currentIndex + 1;\n      }\n\n      if (newIndex >= 0 && newIndex < focusable.length) {\n        var elementToFocus = focusable[newIndex];\n        elementToFocus.focus();\n      }\n    },\n\n    handleMousedown: function (event) {\n      var newTarget = event.target;\n      var triggerButton = $(newTarget).closest('[data-disclosure-trigger]');\n      var newTargetIsInsideDisclosure = this.$container.has(newTarget).length > 0;\n\n      // If click target matches trigger element or disclosure child, do nothing\n      if ($(triggerButton).is(this.$trigger) || newTargetIsInsideDisclosure) {\n        return;\n      }\n\n      this.hide();\n    },\n\n    handleKeypress: function(event) {\n      var keyCode = event.keyCode;\n      \n      switch (keyCode) {\n        case Garnish.RIGHT_KEY:\n        case Garnish.DOWN_KEY:\n          event.preventDefault();\n          this.focusElement('next');\n          break;\n        case Garnish.LEFT_KEY:\n        case Garnish.UP_KEY:\n          event.preventDefault();\n          this.focusElement('prev');\n          break;\n        default:\n          break;\n      }\n    },\n\n    isExpanded: function () {\n      var isExpanded = this.$trigger.attr('aria-expanded');\n\n      return isExpanded === 'true';\n    },\n\n    handleTriggerClick: function() {\n      if (!this.isExpanded()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n\n    show: function () {\n      if (this.isExpanded()) {\n        return;\n      }\n\n      this.setContainerPosition();\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setContainerPosition'\n      );\n      \n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      \n      // Set ARIA attribute for expanded\n      this.$trigger.attr('aria-expanded', 'true');\n\n      // Focus first focusable element\n      var firstFocusableEl = this.$container.find(':focusable')[0];\n      if (firstFocusableEl) {\n        firstFocusableEl.focus();\n      } else {\n        this.$container.attr('tabindex', '-1');\n        this.$container.focus();\n      }\n\n      this.trigger('show');\n      Garnish.shortcutManager.addLayer();\n      Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, function() {\n        this.hide();\n        this.$trigger.focus();\n      }.bind(this));\n    },\n\n    hide: function () {\n      if (!this.isExpanded()) {\n        return;\n      }\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION }\n      );\n\n      this.$trigger.attr('aria-expanded', 'false');\n\n      this.trigger('hide');\n      Garnish.shortcutManager.removeLayer();\n    },\n\n    setContainerPosition: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._alignmentElementOffset = this.$alignmentElement[0].getBoundingClientRect();\n\n      this._wrapperElementOffset = this.$wrapper[0].getBoundingClientRect();\n\n      this._triggerWidth = this.$trigger.outerWidth();\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._triggerWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the trigger?\n      var topClearance = this._alignmentElementOffset.top,\n        bottomClearance = this._windowHeight - this._alignmentElementOffset.bottom;\n\n      // Find top/bottom offset relative to wrapper element\n      var topAdjustment = this._alignmentElementOffset.top - this._wrapperElementOffset.top;\n      var bottomAdjustment = this._alignmentElementOffset.bottom - this._wrapperElementOffset.bottom;\n\n      var bottomClearanceExists = \n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance);\n      \n      if (bottomClearanceExists) {\n        this.$container.css({\n          top: 'calc(100% + ' + bottomAdjustment + 'px)',\n          bottom: 'unset',\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          bottom: 'calc(100% - ' + topAdjustment + 'px)',\n          top: 'unset',\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._alignmentElementOffset.left + this._menuWidth),\n          leftClearance = this._alignmentElementOffset.right - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._wrapperElementOffset;\n      delete this._alignmentElementOffset;\n      delete this._triggerWidth;\n      delete this._triggerHeight;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    _alignLeft: function () {\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css({\n        right: 'unset',\n        left: leftAdjustment + 'px',\n      });\n    },\n\n    _alignRight: function () {\n      var rightAdjustment = this._alignmentElementOffset.right - this._wrapperElementOffset.right;\n      \n      this.$container.css({\n        left: 'unset',\n        right: - rightAdjustment + 'px',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(this._triggerWidth / 2 - this._menuWidth / 2);\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css('left', left - leftAdjustment);\n    },\n  },\n  {\n    defaults: {\n      windowSpacing: 5,\n    },\n  }\n);\n","/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper\n                .outerWidth(Math.ceil($draggee.outerWidth()))\n                .outerHeight(Math.ceil($draggee.outerHeight()))\n                .css({margin: 0, 'pointer-events': 'none'});\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n","/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * ESC key manager class\n * @deprecated Use Garnish.ShortcutManager instead\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n","/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n\n            if (this.settings.hideOnShadeClick) {\n                this.addListener(this.$shade, 'tap,click', 'hide');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n            }\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            if (!this.showing) {\n                return;\n            }\n\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            delete Garnish.HUD.activeHUDs[this._namespace];\n            Garnish.shortcutManager.removeLayer();\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$hud) {\n                this.$hud.remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.CustomSelect($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'aria-controls': this.menu.menuId,\n                'aria-haspopup': 'listbox',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    const $currentOption = this.menu.$options.filter('.hover');\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        const $currentOption = this.menu.$options.filter('.hover');\n                        if ($currentOption.length > 0) {\n                            $currentOption.get(0).click();\n                        }\n                    } else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.$btn.attr('aria-expanded', 'false');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n","/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                Garnish.shortcutManager.addLayer();\n\n                if (this.settings.hideOnEsc) {\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n                }\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            if (!this.visible) {\n                return;\n            }\n\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n            Garnish.shortcutManager.removeLayer();\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n","/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div aria-live=\"polite\" class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            // If Ctrl/Command + Return is pressed, submit the closest form\n            if (ev.keyCode === Garnish.RETURN_KEY && Garnish.isCtrlKeyPressed(ev)) {\n                ev.preventDefault();\n                this.$input.closest('form').submit();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.html(Garnish.NiceText.charsLeftHtml(this.updateCharsLeft._charsLeft));\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        charsLeftHtml: function(charsLeft) {\n            return charsLeft;\n        },\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem, true);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            $item[0].focus({preventScroll: !!preventScroll});\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true, false);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item, false);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true, false);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.CustomSelect.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Keyboard shortcut manager class\n *\n * This can be used to map keyboard events to the current UI \"layer\" (whether that's the base document,\n * a modal, an HUD, or a menu).\n */\nGarnish.ShortcutManager = Garnish.Base.extend(\n    {\n        shortcuts: null,\n        layer: 0,\n\n        init: function() {\n            this.shortcuts = [[]];\n            this.addListener(Garnish.$bod, 'keydown', 'triggerShortcut');\n        },\n\n        addLayer: function() {\n            this.layer++;\n            this.shortcuts.push([]);\n            return this;\n        },\n\n        removeLayer: function() {\n            if (this.layer === 0) {\n                throw 'Can’t remove the base layer.';\n            }\n            this.layer--;\n            this.shortcuts.pop();\n            return this;\n        },\n\n        registerShortcut: function(shortcut, callback, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            this.shortcuts[layer].push({\n                key: JSON.stringify(shortcut),\n                shortcut: shortcut,\n                callback: callback,\n            });\n            return this;\n        },\n\n        unregisterShortcut: function(shortcut, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            var key = JSON.stringify(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            for (var i = 0; i < this.shortcuts[layer].length; i++) {\n                if (this.shortcuts[layer][i].key === key) {\n                    this.shortcuts[layer].splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        },\n\n        _normalizeShortcut: function(shortcut) {\n            if (typeof shortcut === 'number') {\n                shortcut = {keyCode: shortcut};\n            }\n\n            if (typeof shortcut.keyCode !== 'number') {\n                throw 'Invalid shortcut';\n            }\n\n            return {\n                keyCode: shortcut.keyCode,\n                ctrl: !!shortcut.ctrl,\n                shift: !!shortcut.shift,\n                alt: !!shortcut.alt,\n            };\n        },\n\n        triggerShortcut: function(ev) {\n            var shortcut;\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                shortcut = this.shortcuts[this.layer][i].shortcut;\n                if (\n                    shortcut.keyCode === ev.keyCode &&\n                    shortcut.ctrl === Garnish.isCtrlKeyPressed(ev) &&\n                    shortcut.shift === ev.shiftKey &&\n                    shortcut.alt === ev.altKey\n                ) {\n                    ev.preventDefault();\n                    this.shortcuts[this.layer][i].callback(ev);\n                    break;\n                }\n            }\n        },\n    }\n);\n\nGarnish.shortcutManager = new Garnish.ShortcutManager();\n","/**\n * Garnish UI toolkit\n *\n * @copyright 2013 Pixel & Tonic, Inc.. All rights reserved.\n * @author    Brandon Kelly <brandon@pixelandtonic.com>\n * @version   0.1.48\n * @license   MIT\n */\n(function($){\n\n/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n\n/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        return ev.ctrlKey;\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n\n/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n            this.trigger('show');\n            Garnish.shortcutManager.addLayer();\n            Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hideMenu.bind(this));\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n            this.trigger('hide');\n            Garnish.shortcutManager.removeLayer();\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n\n/** global: Garnish */\n/**\n * Custom Select Menu\n */\nGarnish.CustomSelect = Garnish.Base.extend(\n  {\n    settings: null,\n    visible: false,\n\n    $container: null,\n    $options: null,\n    $anchor: null,\n\n    menuId: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _anchorOffset: null,\n    _anchorWidth: null,\n    _anchorHeight: null,\n    _anchorOffsetRight: null,\n    _anchorOffsetBottom: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (container, settings) {\n      this.setSettings(settings, Garnish.CustomSelect.defaults);\n\n      this.$container = $(container);\n\n      this.$options = $();\n      this.addOptions(this.$container.find('a'));\n\n      // Menu List\n      this.menuId = 'menu' + this._namespace;\n      this.$menuList = $('ul', this.$container);\n      this.$menuList.attr({\n        role: 'listbox',\n        id: this.menuId,\n        'aria-hidden': 'true',\n      });\n\n      // Deprecated\n      if (this.settings.attachToElement) {\n        this.settings.anchor = this.settings.attachToElement;\n        Garnish.log(\n          \"The 'attachToElement' setting is deprecated. Use 'anchor' instead.\"\n        );\n      }\n\n      if (this.settings.anchor) {\n        this.$anchor = $(this.settings.anchor);\n      }\n\n      // Prevent clicking on the container from hiding the menu\n      this.addListener(this.$container, 'mousedown', function (ev) {\n        ev.stopPropagation();\n\n        if (ev.target.nodeName !== 'INPUT') {\n          // Prevent this from causing the menu button to blur\n          ev.preventDefault();\n        }\n      });\n    },\n\n    addOptions: function ($options) {\n      this.$options = this.$options.add($options);\n      $options.data('menu', this);\n\n      $options.each(\n        function (optionKey, option) {\n          $(option).attr({\n            role: 'option',\n            tabindex: '-1',\n            id: this.menuId + '-option-' + optionKey,\n          });\n        }.bind(this)\n      );\n\n      this.removeAllListeners($options);\n      this.addListener($options, 'click', function (ev) {\n        this.selectOption(ev.currentTarget);\n      });\n    },\n\n    setPositionRelativeToAnchor: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._anchorOffset = this.$anchor.offset();\n      this._anchorWidth = this.$anchor.outerWidth();\n      this._anchorHeight = this.$anchor.outerHeight();\n      this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n      this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._anchorWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the anchor?\n      var topClearance = this._anchorOffset.top - this._windowScrollTop,\n        bottomClearance =\n          this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n      if (\n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance)\n      ) {\n        this.$container.css({\n          top: this._anchorOffsetBottom,\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          top:\n            this._anchorOffset.top -\n            Math.min(\n              this._menuHeight,\n              topClearance - this.settings.windowSpacing\n            ),\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._anchorOffset.left + this._menuWidth),\n          leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._anchorOffset;\n      delete this._anchorWidth;\n      delete this._anchorHeight;\n      delete this._anchorOffsetRight;\n      delete this._anchorOffsetBottom;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    show: function () {\n      if (this.visible) {\n        return;\n      }\n\n      // Move the menu to the end of the DOM\n      this.$container.appendTo(Garnish.$bod);\n\n      if (this.$anchor) {\n        this.setPositionRelativeToAnchor();\n      }\n\n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      this.$menuList.attr('aria-hidden', 'false');\n\n      Garnish.shortcutManager\n        .addLayer()\n        .registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setPositionRelativeToAnchor'\n      );\n\n      this.visible = true;\n      this.trigger('show');\n    },\n\n    hide: function () {\n      if (!this.visible) {\n        return;\n      }\n\n      this.$menuList.attr('aria-hidden', 'true');\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION },\n        function () {\n          this.$container.detach();\n        }.bind(this)\n      );\n\n      Garnish.shortcutManager.removeLayer();\n      this.removeListener(Garnish.$scrollContainer, 'scroll');\n      this.visible = false;\n      this.trigger('hide');\n    },\n\n    selectOption: function (option) {\n      this.settings.onOptionSelect(option);\n      this.trigger('optionselect', { selectedOption: option });\n      this.hide();\n    },\n\n    _alignLeft: function () {\n      this.$container.css({\n        left: this._anchorOffset.left,\n        right: 'auto',\n      });\n    },\n\n    _alignRight: function () {\n      this.$container.css({\n        right:\n          this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n        left: 'auto',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(\n        this._anchorOffset.left + this._anchorWidth / 2 - this._menuWidth / 2\n      );\n\n      if (left < 0) {\n        left = 0;\n      }\n\n      this.$container.css('left', left);\n    },\n  },\n  {\n    defaults: {\n      anchor: null,\n      windowSpacing: 5,\n      onOptionSelect: $.noop,\n    },\n  }\n);\n\n/**\n * @deprecated\n */\nGarnish.Menu = Garnish.CustomSelect;\n\n/** global: Garnish */\n/**\n * Disclosure Widget\n */\nGarnish.DisclosureMenu = Garnish.Base.extend(\n  {\n    settings: null,\n\n    $trigger: null,\n    $container: null,\n    $alignmentElement: null,\n    $wrapper: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _wrapperElementOffset: null,\n    _alignmentElementOffset: null,\n    _triggerWidth: null,\n    _triggerHeight: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (trigger, settings) {\n      this.setSettings(settings, Garnish.DisclosureMenu.defaults);\n\n      this.$trigger = $(trigger);\n      var triggerId = this.$trigger.attr('aria-controls');\n      this.$container = $(\"#\" + triggerId);\n\n      if (!this.$container) return; /* Exit if no disclosure container is found */\n\n      // Get and store expanded state from trigger\n      var expanded = this.$trigger.attr('aria-expanded');\n\n      // If no expanded state exists on trigger, add for a11y\n      if (!expanded) {\n        this.$trigger.attr('aria-expanded', 'false');\n      }\n\n      // Capture additional alignment element\n      var alignmentSelector = this.$container.data('align-to');\n      if (alignmentSelector) {\n        this.$alignmentElement = $(alignmentSelector);\n      } else {\n        this.$alignmentElement = this.$trigger;\n      }\n\n      var wrapper = this.$container.closest('[data-wrapper]');\n      if (wrapper) {\n        this.$wrapper = wrapper;\n      }\n\n      this.addDisclosureMenuEventListeners();\n    },\n\n    addDisclosureMenuEventListeners: function() {\n      this.addListener(this.$trigger, 'click', function() {\n        this.handleTriggerClick();\n      });\n\n      this.addListener(this.$container, 'keydown', function(event) {\n        this.handleKeypress(event);\n      });\n\n      this.addListener(Garnish.$doc, 'mousedown', this.handleMousedown)\n    },\n\n    focusElement: function(direction) {\n      var currentFocus = $(':focus');\n\n      var focusable = this.$container.find(':focusable');\n\n      var currentIndex = focusable.index(currentFocus);\n      var newIndex;\n\n      if (direction === 'prev') {\n        newIndex = currentIndex - 1;\n      } else {\n        newIndex = currentIndex + 1;\n      }\n\n      if (newIndex >= 0 && newIndex < focusable.length) {\n        var elementToFocus = focusable[newIndex];\n        elementToFocus.focus();\n      }\n    },\n\n    handleMousedown: function (event) {\n      var newTarget = event.target;\n      var triggerButton = $(newTarget).closest('[data-disclosure-trigger]');\n      var newTargetIsInsideDisclosure = this.$container.has(newTarget).length > 0;\n\n      // If click target matches trigger element or disclosure child, do nothing\n      if ($(triggerButton).is(this.$trigger) || newTargetIsInsideDisclosure) {\n        return;\n      }\n\n      this.hide();\n    },\n\n    handleKeypress: function(event) {\n      var keyCode = event.keyCode;\n      \n      switch (keyCode) {\n        case Garnish.RIGHT_KEY:\n        case Garnish.DOWN_KEY:\n          event.preventDefault();\n          this.focusElement('next');\n          break;\n        case Garnish.LEFT_KEY:\n        case Garnish.UP_KEY:\n          event.preventDefault();\n          this.focusElement('prev');\n          break;\n        default:\n          break;\n      }\n    },\n\n    isExpanded: function () {\n      var isExpanded = this.$trigger.attr('aria-expanded');\n\n      return isExpanded === 'true';\n    },\n\n    handleTriggerClick: function() {\n      if (!this.isExpanded()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n\n    show: function () {\n      if (this.isExpanded()) {\n        return;\n      }\n\n      this.setContainerPosition();\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setContainerPosition'\n      );\n      \n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      \n      // Set ARIA attribute for expanded\n      this.$trigger.attr('aria-expanded', 'true');\n\n      // Focus first focusable element\n      var firstFocusableEl = this.$container.find(':focusable')[0];\n      if (firstFocusableEl) {\n        firstFocusableEl.focus();\n      } else {\n        this.$container.attr('tabindex', '-1');\n        this.$container.focus();\n      }\n\n      this.trigger('show');\n      Garnish.shortcutManager.addLayer();\n      Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, function() {\n        this.hide();\n        this.$trigger.focus();\n      }.bind(this));\n    },\n\n    hide: function () {\n      if (!this.isExpanded()) {\n        return;\n      }\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION }\n      );\n\n      this.$trigger.attr('aria-expanded', 'false');\n\n      this.trigger('hide');\n      Garnish.shortcutManager.removeLayer();\n    },\n\n    setContainerPosition: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._alignmentElementOffset = this.$alignmentElement[0].getBoundingClientRect();\n\n      this._wrapperElementOffset = this.$wrapper[0].getBoundingClientRect();\n\n      this._triggerWidth = this.$trigger.outerWidth();\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._triggerWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the trigger?\n      var topClearance = this._alignmentElementOffset.top,\n        bottomClearance = this._windowHeight - this._alignmentElementOffset.bottom;\n\n      // Find top/bottom offset relative to wrapper element\n      var topAdjustment = this._alignmentElementOffset.top - this._wrapperElementOffset.top;\n      var bottomAdjustment = this._alignmentElementOffset.bottom - this._wrapperElementOffset.bottom;\n\n      var bottomClearanceExists = \n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance);\n      \n      if (bottomClearanceExists) {\n        this.$container.css({\n          top: 'calc(100% + ' + bottomAdjustment + 'px)',\n          bottom: 'unset',\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          bottom: 'calc(100% - ' + topAdjustment + 'px)',\n          top: 'unset',\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._alignmentElementOffset.left + this._menuWidth),\n          leftClearance = this._alignmentElementOffset.right - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._wrapperElementOffset;\n      delete this._alignmentElementOffset;\n      delete this._triggerWidth;\n      delete this._triggerHeight;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    _alignLeft: function () {\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css({\n        right: 'unset',\n        left: leftAdjustment + 'px',\n      });\n    },\n\n    _alignRight: function () {\n      var rightAdjustment = this._alignmentElementOffset.right - this._wrapperElementOffset.right;\n      \n      this.$container.css({\n        left: 'unset',\n        right: - rightAdjustment + 'px',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(this._triggerWidth / 2 - this._menuWidth / 2);\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css('left', left - leftAdjustment);\n    },\n  },\n  {\n    defaults: {\n      windowSpacing: 5,\n    },\n  }\n);\n\n/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper\n                .outerWidth(Math.ceil($draggee.outerWidth()))\n                .outerHeight(Math.ceil($draggee.outerHeight()))\n                .css({margin: 0, 'pointer-events': 'none'});\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n\n/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * ESC key manager class\n * @deprecated Use Garnish.ShortcutManager instead\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n\n/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n\n            if (this.settings.hideOnShadeClick) {\n                this.addListener(this.$shade, 'tap,click', 'hide');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n            }\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            if (!this.showing) {\n                return;\n            }\n\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            delete Garnish.HUD.activeHUDs[this._namespace];\n            Garnish.shortcutManager.removeLayer();\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$hud) {\n                this.$hud.remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.CustomSelect($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'aria-controls': this.menu.menuId,\n                'aria-haspopup': 'listbox',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    const $currentOption = this.menu.$options.filter('.hover');\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        const $currentOption = this.menu.$options.filter('.hover');\n                        if ($currentOption.length > 0) {\n                            $currentOption.get(0).click();\n                        }\n                    } else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.$btn.attr('aria-expanded', 'false');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n\n/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                Garnish.shortcutManager.addLayer();\n\n                if (this.settings.hideOnEsc) {\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n                }\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            if (!this.visible) {\n                return;\n            }\n\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n            Garnish.shortcutManager.removeLayer();\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n\n/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div aria-live=\"polite\" class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            // If Ctrl/Command + Return is pressed, submit the closest form\n            if (ev.keyCode === Garnish.RETURN_KEY && Garnish.isCtrlKeyPressed(ev)) {\n                ev.preventDefault();\n                this.$input.closest('form').submit();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.html(Garnish.NiceText.charsLeftHtml(this.updateCharsLeft._charsLeft));\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        charsLeftHtml: function(charsLeft) {\n            return charsLeft;\n        },\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem, true);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            $item[0].focus({preventScroll: !!preventScroll});\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true, false);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item, false);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true, false);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.CustomSelect.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Keyboard shortcut manager class\n *\n * This can be used to map keyboard events to the current UI \"layer\" (whether that's the base document,\n * a modal, an HUD, or a menu).\n */\nGarnish.ShortcutManager = Garnish.Base.extend(\n    {\n        shortcuts: null,\n        layer: 0,\n\n        init: function() {\n            this.shortcuts = [[]];\n            this.addListener(Garnish.$bod, 'keydown', 'triggerShortcut');\n        },\n\n        addLayer: function() {\n            this.layer++;\n            this.shortcuts.push([]);\n            return this;\n        },\n\n        removeLayer: function() {\n            if (this.layer === 0) {\n                throw 'Can’t remove the base layer.';\n            }\n            this.layer--;\n            this.shortcuts.pop();\n            return this;\n        },\n\n        registerShortcut: function(shortcut, callback, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            this.shortcuts[layer].push({\n                key: JSON.stringify(shortcut),\n                shortcut: shortcut,\n                callback: callback,\n            });\n            return this;\n        },\n\n        unregisterShortcut: function(shortcut, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            var key = JSON.stringify(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            for (var i = 0; i < this.shortcuts[layer].length; i++) {\n                if (this.shortcuts[layer][i].key === key) {\n                    this.shortcuts[layer].splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        },\n\n        _normalizeShortcut: function(shortcut) {\n            if (typeof shortcut === 'number') {\n                shortcut = {keyCode: shortcut};\n            }\n\n            if (typeof shortcut.keyCode !== 'number') {\n                throw 'Invalid shortcut';\n            }\n\n            return {\n                keyCode: shortcut.keyCode,\n                ctrl: !!shortcut.ctrl,\n                shift: !!shortcut.shift,\n                alt: !!shortcut.alt,\n            };\n        },\n\n        triggerShortcut: function(ev) {\n            var shortcut;\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                shortcut = this.shortcuts[this.layer][i].shortcut;\n                if (\n                    shortcut.keyCode === ev.keyCode &&\n                    shortcut.ctrl === Garnish.isCtrlKeyPressed(ev) &&\n                    shortcut.shift === ev.shiftKey &&\n                    shortcut.alt === ev.altKey\n                ) {\n                    ev.preventDefault();\n                    this.shortcuts[this.layer][i].callback(ev);\n                    break;\n                }\n            }\n        },\n    }\n);\n\nGarnish.shortcutManager = new Garnish.ShortcutManager();\n\n})(jQuery);\n"]}